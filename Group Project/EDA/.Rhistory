TestAlbums <- apply(TestAlbums, 1, function(x) gsub(".*: ","",x))
myData <- {myData %>%
group_by(AlbumName,AlbumPopularity ,
Release_year, Release_month, Season, isPop, isFolk,
isRock, isIndie, isTechno, isRap, isJazz, isMetal, isBlues, isPunk) %>%
summarize(AlbumLoudness = mean(TrackLoudness),
AlbumTempo = mean(TrackTempo),
AlbumAvgDuration = mean(TrackDuration),
AlbumDanceability = mean(TrackDanceability),
AlbumEnergy = mean(TrackEnergy),
AlbumKey = mean(TrackKey),
AlbumSpeechiness = mean(TrackSpeechiness),
AlbumAcousticness = mean(TrackAcousticness),
AlbumInstrumentalness = mean(TrackInstrumentalness),
AlbumLiveness = mean(TrackLiveness),
AlbumValence = mean(TrackValence),
AlbumTimeSignature = mean(TrackTimeSignature),
AlbumTempo = mean(TrackTempo)
)}
myData <- ungroup(myData)
#Best Model
myData <- select(myData, -AlbumAvgDuration, -AlbumKey, -AlbumSpeechiness,-AlbumTimeSignature)
#test2 Model
#myData <- select(myData, -AlbumAvgDuration, -AlbumKey, -AlbumSpeechiness,-AlbumTimeSignature, -AlbumDanceability)
for (each in 3:dim(myData)[2])
{
if (!is.number(myData[1,each]))
{
myData[,each] <- as.numeric(as.factor(unlist(myData[,each])))
}
myData[,each] <- standardize(myData[,each])
}
#names <- myData$AlbumName
#myData <- standardize(select(myData, -AlbumName, ))
#myData$AlbumName <- names
TestData <- filter(myData, AlbumName %in% TestAlbums)
TestData <- select(TestData, -AlbumName)
TrainData <- filter(myData, !AlbumName %in% TestAlbums)
TrainData <- select(TrainData, -AlbumName)
train.X <- as.matrix(select(TrainData, -AlbumPopularity))
train.Y <- as.matrix(select(TrainData, AlbumPopularity))
test.X <- as.matrix(select(TestData, -AlbumPopularity))
test.Y <- select(TestData, AlbumPopularity)
#train.X <- standardize(train.X)
#train.Y <- (train.Y)
#train.Y <- standardize(train.Y)
#test.X <- standardize(test.X)
#test.Y <- (test.Y)
#test.Y <- standardize(test.Y)
k = 3
goodness <- vector()
for(k in 1:20)
{
print(k)
goodness[k] <- knn.regression.test(k,train.X,train.Y,test.X,test.Y, distances.l2)
}
print(which.min(goodness))
est <- knn.regression.test(2,train.X,train.Y,test.X,test.Y, distances.l2)
data.frame(est, test.Y, test.Y - est)
library(betareg)
# GoodModel3  <-  betareg((AlbumPopularity) ~ AlbumAcousticness +AlbumValence + AlbumDanceability + Release_year+
#                      AlbumTempo+AlbumLoudness+AlbumLiveness
#                      , data = TrainData)
# print(sum((predict(GoodModel3, TestData) - popVect)^2))
# data.frame(popVect, predict(GoodModel3, TestData), (predict(GoodModel3, TestData) - popVect))
#
#
#
# library(glmnet)
#
# lambdas <- 10^seq(2, -2, by = -.1)
# ridge <- glmnet(y = train.Y, x = train.X, lambda = lambdas)
# lambdaFind <- cv.glmnet(y = train.Y, x = train.X, alpha = 0, lambda = lambdas)
# optimalLambda <- lambdaFind$lambda.min
# estimates <- predict(ridge, s = optimalLambda, newx = test.X)
# print("Ridge regression")
# print(sum(((test.Y-estimates)^2)))
library(rio)
library(data.table)
library(dplyr)
library(pracma)
library( splus2R)
#KNN
distances.l2 <- function(x,y)
{
apply(y,1,function(p) apply(x,1,function(q) nthroot(sum((p-q)^2),2)))
}
distances.l1 <- function(x,y) {
apply(y,1,function(p) apply(x,1,function(q) sum(abs(p-q))))
}
knn.regression.test <- function(k,train.X,train.Y,test.X,test.Y,distances)
{
estimates <- vector()
dist <-  distances(train.X, test.X)
#Go through each data point to be tested
#and create a vector holding the responses of the k nearest neighbours
for(each in 1:dim(test.X)[1])
{
adjacency <- data.frame(train.Y, dist[,each])
colnames(adjacency) <- c("Train", "Distances")
adjacency <- adjacency[order(adjacency$Distances),]
#Calculate distance weighted mean
dis <- 0
weightDis <- 0
for(i in 1:k)
{
dis <- dis + 1/adjacency$Distances[i]
weightDis <- weightDis + 1/(adjacency$Distances[i]) * adjacency$Train[i]
}
estimates[each] = weightDis/dis
}
print(sum((test.Y-estimates)^2))
return(estimates)
}
myData <- import("cleanedData.csv", setclass= "tibble")
TestAlbums <- c("Shirley Bassey", "In Dreams","Meddle","London Calling",
"It Takes A Nation Of Millions To Hold Us Back",
"Absolutely", "Blue Lines","Dig Your Own Hole", "Yoshimi Battles The Pink Robots",
"Original Pirate Material",
"Disc-Overy", "What Went Down")
TestAlbums <- import("test_albums_7.txt")[2]
TestAlbums <- apply(TestAlbums, 1, function(x) gsub(".*: ","",x))
myData <- {myData %>%
group_by(AlbumName,AlbumPopularity ,
Release_year, Release_month, Season, isPop, isFolk,
isRock, isIndie, isTechno, isRap, isJazz, isMetal, isBlues, isPunk) %>%
summarize(AlbumLoudness = mean(TrackLoudness),
AlbumTempo = mean(TrackTempo),
AlbumAvgDuration = mean(TrackDuration),
AlbumDanceability = mean(TrackDanceability),
AlbumEnergy = mean(TrackEnergy),
AlbumKey = mean(TrackKey),
AlbumSpeechiness = mean(TrackSpeechiness),
AlbumAcousticness = mean(TrackAcousticness),
AlbumInstrumentalness = mean(TrackInstrumentalness),
AlbumLiveness = mean(TrackLiveness),
AlbumValence = mean(TrackValence),
AlbumTimeSignature = mean(TrackTimeSignature),
AlbumTempo = mean(TrackTempo)
)}
myData <- ungroup(myData)
#Best Model
myData <- select(myData, -AlbumAvgDuration, -AlbumKey, -AlbumSpeechiness,-AlbumTimeSignature)
#test2 Model
#myData <- select(myData, -AlbumAvgDuration, -AlbumKey, -AlbumSpeechiness,-AlbumTimeSignature, -AlbumDanceability)
for (each in 3:dim(myData)[2])
{
if (!is.number(myData[1,each]))
{
myData[,each] <- as.numeric(as.factor(unlist(myData[,each])))
}
myData[,each] <- standardize(myData[,each])
}
#names <- myData$AlbumName
#myData <- standardize(select(myData, -AlbumName, ))
#myData$AlbumName <- names
TestData <- filter(myData, AlbumName %in% TestAlbums)
TestData <- select(TestData, -AlbumName)
TrainData <- filter(myData, !AlbumName %in% TestAlbums)
TrainData <- select(TrainData, -AlbumName)
train.X <- as.matrix(select(TrainData, -AlbumPopularity))
train.Y <- as.matrix(select(TrainData, AlbumPopularity))
test.X <- as.matrix(select(TestData, -AlbumPopularity))
test.Y <- select(TestData, AlbumPopularity)
#train.X <- standardize(train.X)
#train.Y <- (train.Y)
#train.Y <- standardize(train.Y)
#test.X <- standardize(test.X)
#test.Y <- (test.Y)
#test.Y <- standardize(test.Y)
k = 3
goodness <- vector()
for(k in 1:20)
{
print(k)
goodness[k] <- knn.regression.test(k,train.X,train.Y,test.X,test.Y, distances.l2)
}
print(which.min(goodness))
est <- knn.regression.test(2,train.X,train.Y,test.X,test.Y, distances.l2)
data.frame(est, test.Y, test.Y - est)
library(betareg)
# GoodModel3  <-  betareg((AlbumPopularity) ~ AlbumAcousticness +AlbumValence + AlbumDanceability + Release_year+
#                      AlbumTempo+AlbumLoudness+AlbumLiveness
#                      , data = TrainData)
# print(sum((predict(GoodModel3, TestData) - popVect)^2))
# data.frame(popVect, predict(GoodModel3, TestData), (predict(GoodModel3, TestData) - popVect))
#
#
#
# library(glmnet)
#
# lambdas <- 10^seq(2, -2, by = -.1)
# ridge <- glmnet(y = train.Y, x = train.X, lambda = lambdas)
# lambdaFind <- cv.glmnet(y = train.Y, x = train.X, alpha = 0, lambda = lambdas)
# optimalLambda <- lambdaFind$lambda.min
# estimates <- predict(ridge, s = optimalLambda, newx = test.X)
# print("Ridge regression")
# print(sum(((test.Y-estimates)^2)))
library(rio)
library(data.table)
library(dplyr)
library(pracma)
library( splus2R)
#KNN
distances.l2 <- function(x,y)
{
apply(y,1,function(p) apply(x,1,function(q) nthroot(sum((p-q)^2),2)))
}
distances.l1 <- function(x,y) {
apply(y,1,function(p) apply(x,1,function(q) sum(abs(p-q))))
}
knn.regression.test <- function(k,train.X,train.Y,test.X,test.Y,distances)
{
estimates <- vector()
dist <-  distances(train.X, test.X)
#Go through each data point to be tested
#and create a vector holding the responses of the k nearest neighbours
for(each in 1:dim(test.X)[1])
{
adjacency <- data.frame(train.Y, dist[,each])
colnames(adjacency) <- c("Train", "Distances")
adjacency <- adjacency[order(adjacency$Distances),]
#Calculate distance weighted mean
dis <- 0
weightDis <- 0
for(i in 1:k)
{
dis <- dis + 1/adjacency$Distances[i]
weightDis <- weightDis + 1/(adjacency$Distances[i]) * adjacency$Train[i]
}
estimates[each] = weightDis/dis
}
print(sum((test.Y-estimates)^2))
return(estimates)
}
myData <- import("cleanedData.csv", setclass= "tibble")
TestAlbums <- c("Shirley Bassey", "In Dreams","Meddle","London Calling",
"It Takes A Nation Of Millions To Hold Us Back",
"Absolutely", "Blue Lines","Dig Your Own Hole", "Yoshimi Battles The Pink Robots",
"Original Pirate Material",
"Disc-Overy", "What Went Down")
TestAlbums <- import("test_albums_8.txt")[2]
TestAlbums <- apply(TestAlbums, 1, function(x) gsub(".*: ","",x))
myData <- {myData %>%
group_by(AlbumName,AlbumPopularity ,
Release_year, Release_month, Season, isPop, isFolk,
isRock, isIndie, isTechno, isRap, isJazz, isMetal, isBlues, isPunk) %>%
summarize(AlbumLoudness = mean(TrackLoudness),
AlbumTempo = mean(TrackTempo),
AlbumAvgDuration = mean(TrackDuration),
AlbumDanceability = mean(TrackDanceability),
AlbumEnergy = mean(TrackEnergy),
AlbumKey = mean(TrackKey),
AlbumSpeechiness = mean(TrackSpeechiness),
AlbumAcousticness = mean(TrackAcousticness),
AlbumInstrumentalness = mean(TrackInstrumentalness),
AlbumLiveness = mean(TrackLiveness),
AlbumValence = mean(TrackValence),
AlbumTimeSignature = mean(TrackTimeSignature),
AlbumTempo = mean(TrackTempo)
)}
myData <- ungroup(myData)
#Best Model
myData <- select(myData, -AlbumAvgDuration, -AlbumKey, -AlbumSpeechiness,-AlbumTimeSignature)
#test2 Model
#myData <- select(myData, -AlbumAvgDuration, -AlbumKey, -AlbumSpeechiness,-AlbumTimeSignature, -AlbumDanceability)
for (each in 3:dim(myData)[2])
{
if (!is.number(myData[1,each]))
{
myData[,each] <- as.numeric(as.factor(unlist(myData[,each])))
}
myData[,each] <- standardize(myData[,each])
}
#names <- myData$AlbumName
#myData <- standardize(select(myData, -AlbumName, ))
#myData$AlbumName <- names
TestData <- filter(myData, AlbumName %in% TestAlbums)
TestData <- select(TestData, -AlbumName)
TrainData <- filter(myData, !AlbumName %in% TestAlbums)
TrainData <- select(TrainData, -AlbumName)
train.X <- as.matrix(select(TrainData, -AlbumPopularity))
train.Y <- as.matrix(select(TrainData, AlbumPopularity))
test.X <- as.matrix(select(TestData, -AlbumPopularity))
test.Y <- select(TestData, AlbumPopularity)
#train.X <- standardize(train.X)
#train.Y <- (train.Y)
#train.Y <- standardize(train.Y)
#test.X <- standardize(test.X)
#test.Y <- (test.Y)
#test.Y <- standardize(test.Y)
k = 3
goodness <- vector()
for(k in 1:20)
{
print(k)
goodness[k] <- knn.regression.test(k,train.X,train.Y,test.X,test.Y, distances.l2)
}
print(which.min(goodness))
est <- knn.regression.test(2,train.X,train.Y,test.X,test.Y, distances.l2)
data.frame(est, test.Y, test.Y - est)
library(betareg)
# GoodModel3  <-  betareg((AlbumPopularity) ~ AlbumAcousticness +AlbumValence + AlbumDanceability + Release_year+
#                      AlbumTempo+AlbumLoudness+AlbumLiveness
#                      , data = TrainData)
# print(sum((predict(GoodModel3, TestData) - popVect)^2))
# data.frame(popVect, predict(GoodModel3, TestData), (predict(GoodModel3, TestData) - popVect))
#
#
#
# library(glmnet)
#
# lambdas <- 10^seq(2, -2, by = -.1)
# ridge <- glmnet(y = train.Y, x = train.X, lambda = lambdas)
# lambdaFind <- cv.glmnet(y = train.Y, x = train.X, alpha = 0, lambda = lambdas)
# optimalLambda <- lambdaFind$lambda.min
# estimates <- predict(ridge, s = optimalLambda, newx = test.X)
# print("Ridge regression")
# print(sum(((test.Y-estimates)^2)))
library(rio)
library(data.table)
library(dplyr)
myData <- import("cleanedData.csv", setclass= "tibble")
TestAlbums <- c("Shirley Bassey", "In Dreams","Meddle","London Calling",
"It Takes A Nation Of Millions To Hold Us Back",
"Absolutely", "Blue Lines","Dig Your Own Hole", "Yoshimi Battles The Pink Robots",
"Original Pirate Material",
"Disc-Overy", "What Went Down")
TestAlbums <- import("test_albums_1.txt")[2]
TestAlbums <- apply(TestAlbums, 1, function(x) gsub(".*: ","",x))
myData <- {myData %>%
group_by(AlbumName, ArtistPopularity, ArtistNumFollowers,
AlbumBestChartPosition, AlbumWeeksOnChart, AlbumWeeksNumberOne,
AlbumPopularity, Release_year, Release_month, Season, isPop, isFolk,
isRock, isIndie, isTechno, isRap, isJazz, isMetal, isBlues, isPunk) %>%
summarize(AlbumLoudness = mean(TrackLoudness),
AlbumTempo = mean(TrackTempo),
AlbumAvgDuration = mean(TrackDuration),
AlbumDanceability = mean(TrackDanceability),
AlbumEnergy = mean(TrackEnergy),
AlbumKey = mean(TrackKey),
AlbumSpeechiness = mean(TrackSpeechiness),
AlbumAcousticness = mean(TrackAcousticness),
AlbumInstrumentalness = mean(TrackInstrumentalness),
AlbumLiveness = mean(TrackLiveness),
AlbumValence = mean(TrackValence),
AlbumTimeSignature = mean(TrackTimeSignature),
AlbumTempo = mean(TrackTempo)
)}
myData <- ungroup(myData)
#names <- myData$AlbumName
#myData <- standardize(select(myData, -AlbumName, ))
#myData$AlbumName <- names
TestData <- filter(myData, AlbumName %in% TestAlbums)
TestData <- select(TestData, -AlbumName)
TrainData <- filter(myData, !AlbumName %in% TestAlbums)
TrainData <- select(TrainData, -AlbumName)
train.X <- as.matrix(select(TrainData, -AlbumPopularity))
train.Y <- as.matrix(select(TrainData, AlbumPopularity))
test.X <- as.matrix(select(TestData, -AlbumPopularity))
test.Y <- select(TestData, AlbumPopularity)
#train.X <- standardize(train.X)
train.Y <- (train.Y)
#train.Y <- standardize(train.Y)
#test.X <- standardize(test.X)
test.Y <- (test.Y)
GoodModel  <-  lm((AlbumPopularity) ~ AlbumAcousticness +AlbumValence + AlbumDanceability + isPunk +isBlues + isJazz+ isRock + isPop,data = TrainData)
print(sum((predict(GoodModel, TestData) - popVect)^2))
data.frame(popVect, predict(GoodModel, TestData), (predict(GoodModel, TestData) - popVect))
GoodModel2  <-  lm((AlbumPopularity) ~ ArtistNumFollowers+AlbumAcousticness +AlbumValence + AlbumDanceability + isPunk +isBlues + isJazz+ isRock + isPop + isFolk +isRap,data = TrainData)
print(sum((predict(GoodModel2, TestData) - popVect)^2))
data.frame(popVect, predict(GoodModel2, TestData), (predict(GoodModel2, TestData) - popVect))
GoodModel2  <-  lm((AlbumPopularity) ~ ArtistPopularity+ArtistNumFollowers,data = TrainData)
print(sum((predict(GoodModel2, TestData) - popVect)^2))
data.frame(popVect, predict(GoodModel2, TestData), (predict(GoodModel2, TestData) - popVect))
GoodModel3  <-  lm((AlbumPopularity) ~ AlbumAcousticness +AlbumValence + AlbumDanceability + Release_year+
AlbumTempo+AlbumLoudness+AlbumAvgDuration+AlbumLiveness+AlbumTimeSignature+
AlbumKey, data = TrainData)
print(sum((predict(GoodModel3, TestData) - popVect)^2))
data.frame(popVect, predict(GoodModel3, TestData), (predict(GoodModel3, TestData) - popVect))
AllModel <- lm(AlbumPopularity ~. ,data = TrainData)
print(sum((predict(AllModel, TestData) - popVect)^2))
data.frame(popVect, predict(AllModel, TestData), (predict(AllModel, TestData) - popVect))
library(rio)
library(data.table)
library(dplyr)
<<<<<<< HEAD
library(robustHD)
library(devtools)
library(ggfortify)
library(meanShiftR)
library("FactoMineR")
library("factoextra")
library(klaR)
spotify <- read.csv("cleanedData.csv")
spotify <- dplyr::select(spotify, -Artist, - AlbumName, -ArtistGenres, -AlbumBestChartPosition, -AlbumWeeksOnChart, -AlbumWeeksNumberOne, -TrackName, - TrackNumber)
pca <- prcomp(spotify)
FeatureData <- dplyr::select(spotify, TrackValence, TrackTempo, TrackAcousticness, TrackDanceability, TrackEnergy,
TrackSpeechiness, TrackLiveness, TrackInstrumentalness, TrackLoudness)
standardize()
GenreData <- dplyr::select(spotify, isRap, isRock, isFolk, isPop, isMetal, isTechno, isJazz, isIndie, isPunk, isBlues)
res.pca <-PCA(FeatureData, graph = TRUE)
fviz_screeplot(res.pca, addlabels = TRUE, ylim = c(0, 45))
fviz_pca(FeatureData)
plot(GenreData, col=clusters2$cluster)
cor(spotify[,8:18])
plot(x = FeatureData$TrackEnergy,y = FeatureData$TrackLoudness)
# Danceability + Valence = 0.5
# Energy + loudness = 0.77
# Energy + accousticness = -0.7
# Loudness + Accousticness = - 0.6
res.pca <-PCA(FeatureData, graph = TRUE)
?PCA
FeatureData <- dplyr::select(spotify, TrackValence, TrackTempo, TrackAcousticness, TrackDanceability, TrackEnergy,
TrackSpeechiness, TrackLiveness, TrackInstrumentalness, TrackLoudness, TrackMode)
res.pca <-PCA(FeatureData, graph = TRUE)
res.pca
res.pca$var$contrib
?MCA
mca <- MCA(GenreData)
mca
setwd("~/GitHub/ST344/EDA")
library(tidyverse)
library(GGally)
library(pander)
library(gridExtra)
# Cleaning and grouping data
data <- read.csv("cleanedData.csv")
data <- select(data, -ArtistID, -ArtistGenres, -AlbumID, -TrackID, -TrackTimeSignature,
-Release_month, -TrackKey, -TrackMode, -TrackNumber)
AlbumData = {data %>%
group_by(Artist,AlbumName, isPop, isRock, isFolk, isTechno, isRap, isJazz, isIndie, isMetal,
isBlues, isPunk, Release_year, Season, AlbumWeeksNumberOne, AlbumWeeksOnChart,AlbumPopularity) %>%
summarize(AlbumValence = mean(TrackValence),AlbumSpeechiness = mean(TrackSpeechiness),
AlbumLiveness = mean(TrackLiveness), AlbumEnergy = mean(TrackEnergy),
AlbumDanceability = mean(TrackDanceability), AlbumLoudness = mean(TrackLoudness),
AlbumAcousticness = mean(TrackAcousticness), AlbumInstrumentalness = mean(TrackInstrumentalness),
AlbumTempo = mean(TrackTempo)) }
#basic things
cor(AlbumData[,15:26])
summary(AlbumData)
str(AlbumData)
#Hit indicator
AlbumData$Hit <- 0
AlbumData$Hit[AlbumData$AlbumPopularity > 50] <- 1
AlbumData$Hit[AlbumData$AlbumPopularity <= 50] <- 0
AlbumData$Hit <- as.factor(AlbumData$Hit)
#basic things
cor(AlbumData[,15:26])
summary(AlbumData)
str(AlbumData)
#Basic correlation
ggplot(AlbumData, aes(x = AlbumPopularity, y = AlbumDanceability, colour = Season)) +
geom_jitter() + geom_smooth(method = loess, se=FALSE)
ggplot(AlbumData, aes(x = AlbumPopularity, y = AlbumAcousticness, colour = Season)) +
geom_jitter() + geom_smooth(method = loess, se=FALSE)
ggplot(AlbumData, aes(x = AlbumWeeksOnChart, y = AlbumDanceability, colour = Season)) +
geom_jitter() + geom_smooth(method = loess, se=FALSE) + xlim(0, 140)
ggplot(AlbumData, aes(x = AlbumWeeksOnChart, y = AlbumAcousticness, colour = Season)) +
geom_jitter() + geom_smooth(method = loess, se=FALSE) + xlim(0, 140)
#distribution of album popularity
ggplot(AlbumData, aes(x = AlbumPopularity)) + geom_histogram(color="black", fill="white", aes(y=..density..)) +
geom_vline(aes(xintercept=mean(AlbumPopularity)), color="blue", linetype="dashed", size=1) +
geom_density(alpha = 0.2, fill = 'red')
#template for hit/not hit graphs
ggplot(AlbumData, aes(x = AlbumDanceability, y = AlbumAcousticness, colour = Hit)) +
geom_jitter() + geom_smooth(method = loess, se=FALSE)
#somelm models
model1 <- lm(AlbumPopularity ~ isRap + isTechno + isRap + isFolk + isPop + isMetal + isPunk + isBlues + isJazz, data= AlbumData)
model2 <- lm(AlbumPopularity ~ AlbumValence, data = AlbumData)
model3 <- lm(AlbumPopularity ~ AlbumValence + AlbumDanceability, data = AlbumData)
model4 <- lm(AlbumPopularity ~ AlbumValence + AlbumDanceability + AlbumAcousticness, data = AlbumData)
model5 <- lm(AlbumPopularity ~ AlbumValence + AlbumDanceability + AlbumAcousticness + AlbumSpeechiness, data = AlbumData)
model6 <- lm(AlbumPopularity ~ AlbumValence + AlbumDanceability + AlbumAcousticness + AlbumLiveness+isRap+isMetal, data = AlbumData)
#Filtering data
AlbumDataPop <- filter(AlbumData,Hit == '1')
AlbumDataNot <- filter(AlbumData,Hit == '0')
#hit vs not-hit plots
#Acousticness
plot1 <- ggplot(AlbumDataPop, aes(x = AlbumAcousticness)) + geom_histogram() +
geom_vline(aes(xintercept=mean(AlbumAcousticness)), color="blue", linetype="dashed", size=1) +
geom_density(alpha = 0.2, fill = 'red') + labs(title = "Popular")
plot2 <- ggplot(AlbumDataNot, aes(x = AlbumAcousticness)) + geom_histogram() +
geom_vline(aes(xintercept=mean(AlbumAcousticness)), color="blue", linetype="dashed", size=1) +
geom_density(alpha = 0.2, fill = 'red') + labs(title = 'Shitty')
grid.arrange(plot1, plot2, ncol =2)
#Tempo
plot3 <- ggplot(AlbumDataPop, aes(x = AlbumTempo)) +
geom_vline(aes(xintercept=mean(AlbumTempo)), color="blue", linetype="dashed", size=1) +
geom_density(alpha = 0.2, fill = 'red') + labs(title = "Popular")
plot4 <- ggplot(AlbumDataNot, aes(x = AlbumTempo)) +
geom_vline(aes(xintercept=mean(AlbumTempo)), color="blue", linetype="dashed", size=1) +
geom_density(alpha = 0.2, fill = 'red') + labs(title = 'Shitty')
grid.arrange(plot3, plot4, ncol =2)
#Danceability
plot5 <- ggplot(AlbumDataPop, aes(x = AlbumDanceability)) + geom_histogram() +
geom_vline(aes(xintercept=mean(AlbumDanceability)), color="blue", linetype="dashed", size=1) +
geom_density(alpha = 0.2, fill = 'red') + labs(title = "Popular")
plot6 <- ggplot(AlbumDataNot, aes(x = AlbumDanceability)) + geom_histogram() +
geom_vline(aes(xintercept=mean(AlbumDanceability)), color="blue", linetype="dashed", size=1) +
geom_density(alpha = 0.2, fill = 'red') + labs(title = 'Shitty')
grid.arrange(plot5, plot6, ncol =2)
#Loudness
plot7 <- ggplot(AlbumDataPop, aes(x = AlbumLoudness)) +
geom_vline(aes(xintercept=mean(AlbumLoudness)), color="blue", linetype="dashed", size=1) +
geom_density(alpha = 0.2, fill = 'red') + labs(title = "Popular")
plot8 <- ggplot(AlbumDataNot, aes(x = AlbumLoudness)) +
geom_vline(aes(xintercept=mean(AlbumLoudness)), color="blue", linetype="dashed", size=1) +
geom_density(alpha = 0.2, fill = 'red') + labs(title = 'Shitty')
grid.arrange(plot7, plot8, ncol =2)
#Significance of danceability over time
plot9 <- ggplot(AlbumDataPop, aes(x = Release_year, y = AlbumDanceability)) + geom_jitter() +
labs(title = "Popular") + geom_smooth() + xlim(1960, 2020)
plot10 <- ggplot(AlbumDataNot, aes(x = Release_year, y = AlbumDanceability)) + geom_jitter() +
labs(title = 'Shitty')+geom_smooth() + xlim(1960, 2020)
grid.arrange(plot9, plot10, ncol =2)
#significance ofspeechiness over time
plot9 <- ggplot(AlbumDataPop, aes(x = Release_year, y = AlbumSpeechiness)) + geom_jitter() +
labs(title = "Popular") + geom_smooth() + xlim(1960, 2020)
plot10 <- ggplot(AlbumDataNot, aes(x = Release_year, y = AlbumSpeechiness)) + geom_jitter() +
labs(title = 'Shitty')+geom_smooth() + xlim(1960, 2020)
grid.arrange(plot9, plot10, ncol =2)
#significance of acousticness over time
plot11 <- ggplot(AlbumDataPop, aes(x = Release_year, y = AlbumAcousticness)) + geom_jitter() +
labs(title = "Popular") + geom_smooth() + xlim(1960, 2020)
plot12 <- ggplot(AlbumDataNot, aes(x = Release_year, y = AlbumAcousticness)) + geom_jitter() +
labs(title = 'Shitty')+geom_smooth() + xlim(1960, 2020)
grid.arrange(plot11, plot12, ncol =2)
grid.arrange(plot9, plot10, ncol =2)
#significance of loudness over time
plot13 <- ggplot(AlbumDataPop, aes(x = Release_year, y = AlbumLoudness)) + geom_jitter() +
labs(title = "Popular") + geom_smooth() + xlim(1960, 2020)
plot14 <- ggplot(AlbumDataNot, aes(x = Release_year, y = AlbumLoudness)) + geom_jitter() +
labs(title = 'Shitty')+geom_smooth() + xlim(1960, 2020)
grid.arrange(plot13, plot14, ncol =2)
plot15 <- ggplot()
nificance of loudness over time
plot13 <- ggplot(AlbumDataPop, aes(x = Release_year, y = AlbumLoudness)) + geom_jitter() +
labs(title = "Popular") + geom_smooth() + xlim(1960, 2020)
plot14 <- ggplot(AlbumDataNot, aes(x = Release_year, y = AlbumLoudness)) + geom_jitter() +
labs(title = 'Shitty')+geom_smooth() + xlim(1960, 2020)
#significance of acousticness over time
plot11 <- ggplot(AlbumDataPop, aes(x = Release_year, y = AlbumAcousticness)) + geom_jitter() +
labs(title = "Popular") + geom_smooth() + xlim(1960, 2020)
plot12 <- ggplot(AlbumDataNot, aes(x = Release_year, y = AlbumAcousticness)) + geom_jitter() +
labs(title = 'Shitty')+geom_smooth() + xlim(1960, 2020)
plot9 <- ggplot(AlbumDataPop, aes(x = Release_year, y = AlbumDanceability)) + geom_jitter() +
labs(title = "Popular") + geom_smooth() + xlim(1960, 2020)
plot10 <- ggplot(AlbumDataNot, aes(x = Release_year, y = AlbumDanceability)) + geom_jitter() +
labs(title = 'Shitty')+geom_smooth() + xlim(1960, 2020)
grid.arrange(plot9, plot10, ncol =2)
plot1 <- ggplot(AlbumDataPop, aes(x = AlbumAcousticness)) + geom_histogram() +
geom_vline(aes(xintercept=mean(AlbumAcousticness)), color="blue", linetype="dashed", size=1) +
geom_density(alpha = 0.2, fill = 'red') + labs(title = "Popular")
plot2 <- ggplot(AlbumDataNot, aes(x = AlbumAcousticness)) + geom_histogram() +
geom_vline(aes(xintercept=mean(AlbumAcousticness)), color="blue", linetype="dashed", size=1) +
geom_density(alpha = 0.2, fill = 'red') + labs(title = 'Shitty')
grid.arrange(plot1, plot2, ncol =2)
plot9 <- ggplot(AlbumDataPop, aes(x = Release_year, y = AlbumDanceability)) + geom_jitter() +
labs(title = "Unpopular") + geom_smooth() + xlim(1960, 2020)
plot10 <- ggplot(AlbumDataNot, aes(x = Release_year, y = AlbumDanceability)) + geom_jitter() +
labs(title = 'Shitty')+geom_smooth() + xlim(1960, 2020)
grid.arrange(plot9, plot10, ncol =2)
plot9 <- ggplot(AlbumDataPop, aes(x = Release_year, y = TrackValence)) + geom_jitter() +
labs(title = "Unpopular") + geom_smooth() + xlim(1960, 2020)
plot10 <- ggplot(AlbumDataNot, aes(x = Release_year, y = TrackValence)) + geom_jitter() +
labs(title = 'Shitty')+geom_smooth() + xlim(1960, 2020)
grid.arrange(plot9, plot10, ncol =2)
#Significance of danceability over time
plot9 <- ggplot(AlbumDataPop, aes(x = Release_year, y = AlbumValence)) + geom_jitter() +
labs(title = "Unpopular") + geom_smooth() + xlim(1960, 2020)
plot10 <- ggplot(AlbumDataNot, aes(x = Release_year, y = AlbumValence)) + geom_jitter() +
labs(title = 'Shitty')+geom_smooth() + xlim(1960, 2020)
grid.arrange(plot9, plot10, ncol =2)
plot9 <- ggplot(AlbumDataPop, aes(x = Release_year, y = AlbumValence)) + geom_jitter() +
labs(title = "Popular") + geom_smooth() + xlim(1960, 2020)
plot10 <- ggplot(AlbumDataNot, aes(x = Release_year, y = AlbumValence)) + geom_jitter() +
labs(title = 'Unpopular')+geom_smooth() + xlim(1960, 2020)
grid.arrange(plot9, plot10, ncol =2)
plot9 <- ggplot(AlbumDataPop, aes(x = Release_year, y = AlbumValence)) + geom_jitter() +
labs(title = "Popularity over 50") + geom_smooth() + xlim(1960, 2020)
plot10 <- ggplot(AlbumDataNot, aes(x = Release_year, y = AlbumValence)) + geom_jitter() +
labs(title = 'Popularity less than 50')+geom_smooth() + xlim(1960, 2020)
grid.arrange(plot9, plot10, ncol =2)
plot9 <- ggplot(AlbumDataPop, aes(x = Release_year, y = AlbumValence)) + geom_jitter() +
labs(title = "Popularity over 50") + geom_smooth() + xlim(1960, 2020) + ylim(0.2, 0.9)
plot10 <- ggplot(AlbumDataNot, aes(x = Release_year, y = AlbumValence)) + geom_jitter() +
labs(title = 'Popularity less than 50')+geom_smooth() + xlim(1960, 2020) + ylim(0.2, 0.9)
grid.arrange(plot9, plot10, ncol =2)
plot9 <- ggplot(AlbumDataPop, aes(x = Release_year, y = AlbumValence)) + geom_jitter() +
labs(title = "Album Popularity over 50") + geom_smooth() + xlim(1960, 2020) + ylim(0.2, 0.9)
plot10 <- ggplot(AlbumDataNot, aes(x = Release_year, y = AlbumValence)) + geom_jitter() +
labs(title = 'Album Popularity less than 50')+geom_smooth() + xlim(1960, 2020) + ylim(0.2, 0.9)
grid.arrange(plot9, plot10, ncol =2)
=======
myData <- import("cleanedData.csv", setclass= "tibble")
TestAlbums <- c("Shirley Bassey", "In Dreams","Meddle","London Calling",
"It Takes A Nation Of Millions To Hold Us Back",
"Absolutely", "Blue Lines","Dig Your Own Hole", "Yoshimi Battles The Pink Robots",
"Original Pirate Material",
"Disc-Overy", "What Went Down")
TestAlbums <- import("test_albums_5.txt")[2]
TestAlbums <- apply(TestAlbums, 1, function(x) gsub(".*: ","",x))
myData <- {myData %>%
group_by(AlbumName, ArtistPopularity, ArtistNumFollowers,
AlbumBestChartPosition, AlbumWeeksOnChart, AlbumWeeksNumberOne,
AlbumPopularity, Release_year, Release_month, Season, isPop, isFolk,
isRock, isIndie, isTechno, isRap, isJazz, isMetal, isBlues, isPunk) %>%
summarize(AlbumLoudness = mean(TrackLoudness),
AlbumTempo = mean(TrackTempo),
AlbumAvgDuration = mean(TrackDuration),
AlbumDanceability = mean(TrackDanceability),
AlbumEnergy = mean(TrackEnergy),
AlbumKey = mean(TrackKey),
AlbumSpeechiness = mean(TrackSpeechiness),
AlbumAcousticness = mean(TrackAcousticness),
AlbumInstrumentalness = mean(TrackInstrumentalness),
AlbumLiveness = mean(TrackLiveness),
AlbumValence = mean(TrackValence),
AlbumTimeSignature = mean(TrackTimeSignature),
AlbumTempo = mean(TrackTempo)
)}
myData <- ungroup(myData)
#names <- myData$AlbumName
#myData <- standardize(select(myData, -AlbumName, ))
#myData$AlbumName <- names
TestData <- filter(myData, AlbumName %in% TestAlbums)
TestData <- select(TestData, -AlbumName)
TrainData <- filter(myData, !AlbumName %in% TestAlbums)
TrainData <- select(TrainData, -AlbumName)
train.X <- as.matrix(select(TrainData, -AlbumPopularity))
train.Y <- as.matrix(select(TrainData, AlbumPopularity))
test.X <- as.matrix(select(TestData, -AlbumPopularity))
test.Y <- select(TestData, AlbumPopularity)
#train.X <- standardize(train.X)
train.Y <- (train.Y)
#train.Y <- standardize(train.Y)
#test.X <- standardize(test.X)
test.Y <- (test.Y)
GoodModel  <-  lm((AlbumPopularity) ~ AlbumAcousticness +AlbumValence + AlbumDanceability + isPunk +isBlues + isJazz+ isRock + isPop,data = TrainData)
print(sum((predict(GoodModel, TestData) - popVect)^2))
data.frame(popVect, predict(GoodModel, TestData), (predict(GoodModel, TestData) - popVect))
GoodModel2  <-  lm((AlbumPopularity) ~ ArtistNumFollowers+AlbumAcousticness +AlbumValence + AlbumDanceability + isPunk +isBlues + isJazz+ isRock + isPop + isFolk +isRap,data = TrainData)
print(sum((predict(GoodModel2, TestData) - popVect)^2))
data.frame(popVect, predict(GoodModel2, TestData), (predict(GoodModel2, TestData) - popVect))
GoodModel2  <-  lm((AlbumPopularity) ~ ArtistPopularity+ArtistNumFollowers,data = TrainData)
print(sum((predict(GoodModel2, TestData) - popVect)^2))
data.frame(popVect, predict(GoodModel2, TestData), (predict(GoodModel2, TestData) - popVect))
GoodModel3  <-  lm((AlbumPopularity) ~ AlbumAcousticness +AlbumValence + AlbumDanceability + Release_year+
AlbumTempo+AlbumLoudness+AlbumAvgDuration+AlbumLiveness+AlbumTimeSignature+
AlbumKey, data = TrainData)
print(sum((predict(GoodModel3, TestData) - popVect)^2))
data.frame(popVect, predict(GoodModel3, TestData), (predict(GoodModel3, TestData) - popVect))
AllModel <- lm(AlbumPopularity ~. ,data = TrainData)
print(sum((predict(AllModel, TestData) - popVect)^2))
data.frame(popVect, predict(AllModel, TestData), (predict(AllModel, TestData) - popVect))
View(myData)
library(rio)
library(data.table)
library(dplyr)
myData <- import("cleanedData.csv", setclass= "tibble")
TestAlbums <- c("Shirley Bassey", "In Dreams","Meddle","London Calling",
"It Takes A Nation Of Millions To Hold Us Back",
"Absolutely", "Blue Lines","Dig Your Own Hole", "Yoshimi Battles The Pink Robots",
"Original Pirate Material",
"Disc-Overy", "What Went Down")
TestAlbums <- import("test_albums_6.txt")[2]
TestAlbums <- apply(TestAlbums, 1, function(x) gsub(".*: ","",x))
myData <- {myData %>%
group_by(AlbumName, ArtistPopularity, ArtistNumFollowers,
AlbumBestChartPosition, AlbumWeeksOnChart, AlbumWeeksNumberOne,
AlbumPopularity, Release_year, Release_month, Season, isPop, isFolk,
isRock, isIndie, isTechno, isRap, isJazz, isMetal, isBlues, isPunk) %>%
summarize(AlbumLoudness = mean(TrackLoudness),
AlbumTempo = mean(TrackTempo),
AlbumAvgDuration = mean(TrackDuration),
AlbumDanceability = mean(TrackDanceability),
AlbumEnergy = mean(TrackEnergy),
AlbumKey = mean(TrackKey),
AlbumSpeechiness = mean(TrackSpeechiness),
AlbumAcousticness = mean(TrackAcousticness),
AlbumInstrumentalness = mean(TrackInstrumentalness),
AlbumLiveness = mean(TrackLiveness),
AlbumValence = mean(TrackValence),
AlbumTimeSignature = mean(TrackTimeSignature),
AlbumTempo = mean(TrackTempo)
)}
myData <- ungroup(myData)
#names <- myData$AlbumName
#myData <- standardize(select(myData, -AlbumName, ))
#myData$AlbumName <- names
TestData <- filter(myData, AlbumName %in% TestAlbums)
TestData <- select(TestData, -AlbumName)
TrainData <- filter(myData, !AlbumName %in% TestAlbums)
TrainData <- select(TrainData, -AlbumName)
train.X <- as.matrix(select(TrainData, -AlbumPopularity))
train.Y <- as.matrix(select(TrainData, AlbumPopularity))
test.X <- as.matrix(select(TestData, -AlbumPopularity))
test.Y <- select(TestData, AlbumPopularity)
#train.X <- standardize(train.X)
train.Y <- (train.Y)
#train.Y <- standardize(train.Y)
#test.X <- standardize(test.X)
test.Y <- (test.Y)
GoodModel  <-  lm((AlbumPopularity) ~ AlbumAcousticness +AlbumValence + AlbumDanceability + isPunk +isBlues + isJazz+ isRock + isPop,data = TrainData)
print(sum((predict(GoodModel, TestData) - popVect)^2))
data.frame(popVect, predict(GoodModel, TestData), (predict(GoodModel, TestData) - popVect))
GoodModel2  <-  lm((AlbumPopularity) ~ ArtistNumFollowers+AlbumAcousticness +AlbumValence + AlbumDanceability + isPunk +isBlues + isJazz+ isRock + isPop + isFolk +isRap,data = TrainData)
print(sum((predict(GoodModel2, TestData) - popVect)^2))
data.frame(popVect, predict(GoodModel2, TestData), (predict(GoodModel2, TestData) - popVect))
GoodModel2  <-  lm((AlbumPopularity) ~ ArtistPopularity+ArtistNumFollowers,data = TrainData)
print(sum((predict(GoodModel2, TestData) - popVect)^2))
data.frame(popVect, predict(GoodModel2, TestData), (predict(GoodModel2, TestData) - popVect))
GoodModel3  <-  lm((AlbumPopularity) ~ AlbumAcousticness +AlbumValence + AlbumDanceability + Release_year+
AlbumTempo+AlbumLoudness+AlbumAvgDuration+AlbumLiveness+AlbumTimeSignature+
AlbumKey, data = TrainData)
print(sum((predict(GoodModel3, TestData) - popVect)^2))
data.frame(popVect, predict(GoodModel3, TestData), (predict(GoodModel3, TestData) - popVect))
AllModel <- lm(AlbumPopularity ~. ,data = TrainData)
print(sum((predict(AllModel, TestData) - popVect)^2))
data.frame(popVect, predict(AllModel, TestData), (predict(AllModel, TestData) - popVect))
>>>>>>> f650051d6629eea6731e6feaea57a7a278e8fda2
