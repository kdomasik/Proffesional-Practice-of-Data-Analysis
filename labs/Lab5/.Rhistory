family = quasi(link = "log") )) +
ggtitle("GLM fit with log link") +
theme_bw()
gy_logit <- betareg(TrackDanceability ~ TrackValence, data = Spotify)
myplot3 <- ggplot(Spotify, aes(x = TrackValence, y = TrackDanceability)) +
geom_point() +
geom_line(aes(y = predict(gy_logit, Spotify)),color=c("#3366FF"),size=1.1) +
ggtitle("Beta regression fit with logit link") +
theme_bw()
myplot1
myplot2
muplot3
myplot3
par(mfrow(3,1))
par(mfrow=c(3,1))
par(mfrow=c(3,1))
myplot1
myplot2
myplot3
par(mfrow=c(1,3))
par(mfrow=c(1,3))
myplot1
myplot2
myplot3
par(mfrow=c(1,3))
myplot1
par(mfrow=c(1,3))
myplot1
myplot2
myplot3
grid.arrange(myplot1, myplot2, nrow = 1)
library(grid)
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
grid.arrange(myplot1, myplot2, myplot3, nrow = 1)
# Step 3
scatter_plot <- ggplot(Spotify, aes(x = TrackValence,
y = TrackDanceability, color=TrackSpeechiness>0.33)) +
geom_point() +
ggtitle("") +
theme_bw()
scatter_plot
model1 <- betareg(TrackDanceability ~ Tracvalence, daa = Spotify)
scatter_plot
model1 <- betareg(TrackDanceability ~ TrackValence, data = Spotify)
View(myplot1)
View(myplot1)
model2 <- betareg(TrackDenceability ~ TrackValance + as.numeric(TrackSpeechiness>0.33),
data = Spotify)
model3 <-
model2 <- betareg(TrackDenceability ~ TrackValance + as.numeric(TrackSpeechiness>0.33),
data = Spotify)
model1 <- betareg(TrackDanceability ~ TrackValence, data = Spotify)
model2 <- betareg(TrackDanceability ~ TrackValance + as.numeric(TrackSpeechiness>0.33),
data = Spotify)
model1 <- betareg(TrackDanceability ~ TrackValence, data = Spotify)
model2 <- betareg(TrackDanceability ~ TrackValence + as.numeric(TrackSpeechiness>0.33),
data = Spotify)
model3 <- betareg(TrackDanceability ~ -1 + TrackValence + factor(TrackSpeechiness > 0.33
+ factor(TrackSpeechiness>0.33):TrackValence, data = Spotify))
model1
model2
model3 <- betareg(TrackDanceability ~ -1 + TrackValence + factor(TrackSpeechiness > 0.33
+ factor(TrackSpeechiness>0.33):TrackValence, data = Spotify))
model2 <- betareg(TrackDanceability ~ TrackValence + as.numeric(TrackSpeechiness>0.33),
data = Spotify)
model3 <- betareg(TrackDanceability  ~ -1 + TrackValence + factor(TrackSpeechiness > 0.33
+ factor(TrackSpeechiness>0.33):TrackValence, data = Spotify))
model3 <- betareg(TrackDanceability  ~ -1 + TrackValence + factor(TrackSpeechiness > 0.33)
+ factor(TrackSpeechiness>0.33):TrackValence, data = Spotify)
model1
model2
model3
plot(model1)
summary(model2)
model1 <- betareg(TrackDanceability ~ TrackValence, data = Spotify, family = quasi(link = "log",
variance = "mu^2"))
model2 <- betareg(TrackDanceability ~ TrackValence + as.numeric(TrackSpeechiness>0.33),
data = Spotify, family = quasi(link = "log", variance = "mu^2"))
model3 <- betareg(TrackDanceability  ~ -1 + TrackValence + factor(TrackSpeechiness > 0.33)
+ factor(TrackSpeechiness>0.33):TrackValence, data = Spotify,
family = quasi(link = "log", variance = "mu^2"))
model1
model1 <- glm(TrackDanceability ~ TrackValence, data = Spotify, family = quasi(link = "log",
variance = "mu^2"))
model2 <- glm(TrackDanceability ~ TrackValence + as.numeric(TrackSpeechiness>0.33),
data = Spotify, family = quasi(link = "log", variance = "mu^2"))
model3 <- glm(TrackDanceability  ~ -1 + TrackValence + factor(TrackSpeechiness > 0.33)
+ factor(TrackSpeechiness>0.33):TrackValence, data = Spotify,
family = quasi(link = "log", variance = "mu^2"))
model1
model3
model2
model3
?res.hc
?hclust
library(factorextra)
install.packages("factoextra")
library(factoextra)
res.hc <- hclust(dist(MyDFData[,4:6]), method = "ward.D2")
library(factoextra)
fviz_dend(res.hc, cex = 0.2, k = 20, palette = "jco", labels_track_height = 10)
res.hc <- hclust(dist(MyDFData[,4:6]), method = "ward.D2")
MyData = {Spotify %>%
group_by(Artist, AlbumName, AlbumReleaseData) %>%
summarize(AlbumValence = mean(TrackValence),
AlbumDanceability = mean(TrackDanceability),
AlbumSpeechiness = mean(TrackSpeechiness))}
MyDFData = as.data.frame(MyData)
MyDFData[,4:6] <- scale(MyDFData[,4:6])
row.names(MyDFData) = paste(MyDFData$Artist, MyDFData$AlbumName)
res.hc <- hclust(dist(MyDFData[,4:6]), method = "ward.D2")
library(factoextra)
fviz_dend(res.hc, cex = 0.2, k = 20, palette = "jco", labels_track_height = 10)
res.hc <- hclust(dist(MyDFData[,4:6]), method = "ward.D2")
MyDFData = as.data.frame(MyData)
MyData = {Spotify %>%
group_by(Artist, AlbumName, AlbumReleaseData) %>%
summarize(AlbumValence = mean(TrackValence),
AlbumDanceability = mean(TrackDanceability),
AlbumSpeechiness = mean(TrackSpeechiness))}
MyData = {Spotify %>%
group_by(Artist, AlbumName, AlbumReleaseDate) %>%
summarize(AlbumValence = mean(TrackValence),
AlbumDanceability = mean(TrackDanceability),
AlbumSpeechiness = mean(TrackSpeechiness))}
MyDFData = as.data.frame(MyData)
MyDFData[,4:6] <- scale(MyDFData[,4:6])
row.names(MyDFData) = paste(MyDFData$Artist, MyDFData$AlbumName)
res.hc <- hclust(dist(MyDFData[,4:6]), method = "ward.D2")
library(factoextra)
fviz_dend(res.hc, cex = 0.2, k = 20, palette = "jco", labels_track_height = 10)
scatter_plot
scatter_plot <- ggplot(Spotify, aes(x = TrackValence,
y = TrackDanceability, color=TrackSpeechiness>0.33)) +
geom_point() +
ggtitle("") +
theme_bw() +
geom_smooth()
scatter_plot
View(MyData)
model1 <- glm(TrackDanceability ~ TrackValence, data = Spotify, family = quasi(link = "log",
variance = "mu^2"))
plot1 <- ggplot(Spotify, aes(x = TrackValence, y  = TrackDanceability) +
method.args = list(
family = quasi(link = "log", variance = "mu^2"),
mustart = rep(10, n))) +
ylab("Time spent looking after family members (minutes)") +
ggtitle("GLM fit with log link, multiplicative error, and B-spline")
plot1
plot1 <- ggplot(Spotify, aes(x = TrackValence, y  = TrackDanceability) +
method.args = list(
family = quasi(link = "log", variance = "mu^2"),
mustart = rep(10, n))) +
ylab("Time spent looking after family members (minutes)") +
ggtitle("GLM fit with log link, multiplicative error, and B-spline")
plot1 <- ggplot(Spotify, aes(x = TrackValence, y  = TrackDanceability)) +
geom_smooth(method = 'glm', formula = y ~ (bs(x, knots = 20 * (1:4))),
method.args = list(
family = quasi(link = "log", variance = "mu^2"),
mustart = rep(10, n))) +
ylab("Time spent looking after family members (minutes)") +
ggtitle("GLM fit with log link, multiplicative error, and B-spline")
plot1 <- ggplot(Spotify, aes(x = TrackValence, y  = TrackDanceability)) +
geom_smooth(method = 'glm', formula = y ~ (bs(x, knots = 20 * (1:4))),
method.args = list(
family = quasi(link = "log", variance = "mu^2"))) +
ylab("Time spent looking after family members (minutes)") +
ggtitle("GLM fit with log link, multiplicative error, and B-spline")
plot1
plot1
plot1 <- ggplot(Spotify, aes(x = TrackValence, y  = TrackDanceability)) +
geom_smooth(method = 'glm', formula = y ~ x,
method.args = list(
family = quasi(link = "log", variance = "mu^2"))) +
ylab("Time spent looking after family members (minutes)") +
ggtitle("GLM fit with log link, multiplicative error, and B-spline")
plot1
model2 <- glm(TrackDanceability ~ TrackValence + as.numeric(TrackSpeechiness>0.33),
data = Spotify, family = quasi(link = "log", variance = "mu^2"))
plot2 <- ggplot(Spotify) +
geom_smooth(data=(model2), aes(x = Spotify$TrackValence, y = model2$fitted.values, color=Spotify$TrackSpeechiness>0.33)) +
ylab("Time spent looking after family members (minutes)") +
ggtitle("GLM fit with log link, multiplicative error, and B-spline")
plot2
model3 <- glm(TrackDanceability  ~ -1 + TrackValence + factor(TrackSpeechiness > 0.33)
+ factor(TrackSpeechiness>0.33):TrackValence, data = Spotify,
family = quasi(link = "log", variance = "mu^2"))
library(ggplot2)
library(splines)
library(gridExtra)
Spotify <- read_excel("edited_spotify.xlsx")
Spotify$TrackDanceability[which(Spotify$TrackDanceability==0)] = 1e-6
# Step 2
myplot1 <- ggplot(Spotify, aes(x = TrackValence, y = TrackDanceability)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ x, se = FALSE) +
ggtitle("Linear regression fit") +
theme_bw()
myplot2 <- ggplot(Spotify, aes(x = TrackValence, y = TrackDanceability)) +
geom_point() +
geom_smooth(method = 'glm', formula = y ~ x, se = FALSE,
method.args = list(
family = quasi(link = "log") )) +
ggtitle("GLM fit with log link") +
theme_bw()
gy_logit <- betareg(TrackDanceability ~ TrackValence, data = Spotify)
myplot3 <- ggplot(Spotify, aes(x = TrackValence, y = TrackDanceability)) +
geom_point() +
geom_line(aes(y = predict(gy_logit, Spotify)),color=c("#3366FF"),size=1.1) +
ggtitle("Beta regression fit with logit link") +
theme_bw()
# Step 3
scatter_plot <- ggplot(Spotify, aes(x = TrackValence,
y = TrackDanceability, color=TrackSpeechiness>0.33)) +
geom_point() +
ggtitle("") +
theme_bw() +
geom_smooth()
model1 <- glm(TrackDanceability ~ TrackValence, data = Spotify, family = quasi(link = "log",
variance = "mu^2"))
model2 <- glm(TrackDanceability ~ TrackValence + as.numeric(TrackSpeechiness>0.33),
data = Spotify, family = quasi(link = "log", variance = "mu^2"))
model3 <- glm(TrackDanceability  ~ -1 + TrackValence + factor(TrackSpeechiness > 0.33)
+ factor(TrackSpeechiness>0.33):TrackValence, data = Spotify,
family = quasi(link = "log", variance = "mu^2"))
MyData = {Spotify %>%
group_by(Artist, AlbumName, AlbumReleaseDate) %>%
summarize(AlbumValence = mean(TrackValence),
AlbumDanceability = mean(TrackDanceability),
AlbumSpeechiness = mean(TrackSpeechiness))}
MyDFData = as.data.frame(MyData)
MyDFData[,4:6] <- scale(MyDFData[,4:6])
row.names(MyDFData) = paste(MyDFData$Artist, MyDFData$AlbumName)
res.hc <- hclust(dist(MyDFData[,4:6]), method = "ward.D2")
library(factoextra)
fviz_dend(res.hc, cex = 0.2, k = 20, palette = "jco", labels_track_height = 10)
model1 <- glm(TrackDanceability ~ TrackValence, data = Spotify, family = quasi(link = "log",
variance = "mu^2"))
plot1 <- ggplot(Spotify, aes(x = TrackValence, y  = TrackDanceability)) +
geom_smooth(method = 'glm', formula = y ~ x,
method.args = list(
family = quasi(link = "log", variance = "mu^2"))) +
ylab("Time spent looking after family members (minutes)") +
ggtitle("GLM fit with log link, multiplicative error, and B-spline")
model2 <- glm(TrackDanceability ~ TrackValence + as.numeric(TrackSpeechiness>0.33),
data = Spotify, family = quasi(link = "log", variance = "mu^2"))
plot2 <- ggplot(Spotify) +
geom_smooth(data=(model2), aes(x = Spotify$TrackValence, y = model2$fitted.values, color=Spotify$TrackSpeechiness>0.33)) +
ylab("Time spent looking after family members (minutes)") +
ggtitle("GLM fit with log link, multiplicative error, and B-spline")
model3 <- glm(TrackDanceability  ~ -1 + TrackValence + factor(TrackSpeechiness > 0.33)
+ factor(TrackSpeechiness>0.33):TrackValence, data = Spotify,
family = quasi(link = "log", variance = "mu^2"))
plot3 <- ggplot(Spotify) +
geom_smooth(data=(model3), aes(x = Spotify$TrackValence, y = model3$fitted.values, color=Spotify$TrackSpeechiness>0.33)) +
ylab("Time spent looking after family members (minutes)") +
ggtitle("GLM fit with log link, multiplicative error, and B-spline")
grid.arrange(plot1, plot2, plot3, ncol=2)
grid.arrange(plot1, plot2, plot3, ncol=3)
grid.arrange(plot1, plot2, plot3, nrow = (2, 2))
grid.arrange(plot1, plot2, plot3, nrow = c(2, 2))
plot3
knitr::opts_chunk$set(echo = TRUE)
plot3 <- ggplot(Spotify) +
geom_smooth(data=(model3), aes(x = Spotify$TrackValence, y = model3$fitted.values, color=Spotify$TrackSpeechiness>0.33)) +
ylab("TrackDanceability")  +  theme(legend.title = "Speechiness>0.33") + xlab("TrackValence")
model1 <- glm(TrackDanceability ~ TrackValence, data = Spotify, family = quasi(link = "log",
variance = "mu^2"))
model2 <- glm(TrackDanceability ~ TrackValence + as.numeric(TrackSpeechiness>0.33),
data = Spotify, family = quasi(link = "log", variance = "mu^2"))
model3 <- glm(TrackDanceability  ~ -1 + TrackValence + factor(TrackSpeechiness > 0.33)
+ factor(TrackSpeechiness>0.33):TrackValence, data = Spotify,
family = quasi(link = "log", variance = "mu^2"))
plot1 <- ggplot(Spotify, aes(x = TrackValence, y  = TrackDanceability)) +
geom_smooth(method = 'glm', formula = y ~ x, method.args = list(family = quasi(link = "log", variance = "mu^2"))) +
ylab("TrackDanceability") + xlab("TrackValence")
plot2 <- ggplot(Spotify) + geom_smooth(data=(model2), aes(x = Spotify$TrackValence, y = model2$fitted.values, color=Spotify$TrackSpeechiness>0.33))+
ylab("TrackDanceability") + theme(legend.position = "top") + xlab("TrackValence") + scale_fill_discrete(name = "TrackSpeechiness > 0.33")
plot3 <- ggplot(Spotify) +
geom_smooth(data=(model3), aes(x = Spotify$TrackValence, y = model3$fitted.values, color=Spotify$TrackSpeechiness>0.33)) +
ylab("TrackDanceability")  +  theme(legend.position = "top") + xlab("TrackValence") + + scale_fill_discrete(name = "TrackSpeechiness > 0.33")
grid.arr
model1 <- glm(TrackDanceability ~ TrackValence, data = Spotify, family = quasi(link = "log",
variance = "mu^2"))
model2 <- glm(TrackDanceability ~ TrackValence + as.numeric(TrackSpeechiness>0.33),
data = Spotify, family = quasi(link = "log", variance = "mu^2"))
model3 <- glm(TrackDanceability  ~ -1 + TrackValence + factor(TrackSpeechiness > 0.33)
+ factor(TrackSpeechiness>0.33):TrackValence, data = Spotify,
family = quasi(link = "log", variance = "mu^2"))
plot1 <- ggplot(Spotify, aes(x = TrackValence, y  = TrackDanceability)) +
geom_smooth(method = 'glm', formula = y ~ x, method.args = list(family = quasi(link = "log", variance = "mu^2"))) +
ylab("TrackDanceability") + xlab("TrackValence")
plot2 <- ggplot(Spotify) + geom_smooth(data=(model2), aes(x = Spotify$TrackValence, y = model2$fitted.values, color=Spotify$TrackSpeechiness>0.33))+
ylab("TrackDanceability") + theme(legend.position = "top") + xlab("TrackValence") + scale_fill_discrete(name = "TrackSpeechiness > 0.33")
plot3 <- ggplot(Spotify) +
geom_smooth(data=(model3), aes(x = Spotify$TrackValence, y = model3$fitted.values, color=Spotify$TrackSpeechiness>0.33)) +
ylab("TrackDanceability")  +  theme(legend.position = "top") + xlab("TrackValence") + + scale_fill_discrete(name = "TrackSpeechiness > 0.33")
setwd("~/GitHub/ST344---private/labs/Lab5")
View(myplot1)
View(MyDFData)
tinytex::install_tinytex()
install.packages("pander")
anova(model1, model2, model3)
install.packages("timevis")
install.packages("timevis")
library(lubridate)
library(dplyr)
edited_spotify_clean_dates$AlbumReleaseDate = parse_date_time(edited_spotify_clean_dates$AlbumReleaseDate,orders=c("y","ym","ymd"))
data1 <- edited_spotify %>% dplyr::mutate(Release_year = lubridate::year(edited_spotify_clean_dates$AlbumReleaseDate),
Release_month = lubridate::month(edited_spotify_clean_dates$AlbumReleaseDate),
Release_day = lubridate::day(edited_spotify_clean_dates$AlbumReleaseDate))
data2 <- select (data1,-c(AlbumReleaseDate, Release_day))
Season <- data2$Release_month
Season[Season %in% 12] <- "winter"
Season[Season %in% 1] <- "winter"
Season[Season %in% 2] <- "winter"
Season[Season %in% 3] <- "spring"
Season[Season %in% 4] <- "spring"
Season[Season %in% 5] <- "spring"
Season[Season %in% 6] <- "summer"
Season[Season %in% 7] <- "summer"
Season[Season %in% 8] <- "summer"
Season[Season %in% 9] <- "autumn"
Season[Season %in% 10] <- "autumn"
Season[Season %in% 11] <- "autumn"
data2 <- cbind(data2, Season)
data2$Release_month[data2$Release_month %in% 1] <- "January"
data2$Release_month[data2$Release_month %in% 2] <- "February"
data2$Release_month[data2$Release_month %in% 3] <- "March"
data2$Release_month[data2$Release_month %in% 4] <- "April"
data2$Release_month[data2$Release_month %in% 5] <- "May"
data2$Release_month[data2$Release_month %in% 6] <- "June"
data2$Release_month[data2$Release_month %in% 7] <- "July"
data2$Release_month[data2$Release_month %in% 8] <- "August"
data2$Release_month[data2$Release_month %in% 9] <- "September"
data2$Release_month[data2$Release_month %in% 10] <- "October"
data2$Release_month[data2$Release_month %in% 11] <- "November"
data2$Release_month[data2$Release_month %in% 12] <- "December"
library(xlsx)
write.csv(data2, file = "edited_spotify_04112019.csv")
spring: 3,4,5
summer: 6,7,8
autumn: 9,10,11
winter: 12,1,2
library(lubridate)
library(dplyr)
edited_spotify_clean_dates$AlbumReleaseDate = parse_date_time(edited_spotify_clean_dates$AlbumReleaseDate,orders=c("y","ym","ymd"))
data1 <- edited_spotify %>% dplyr::mutate(Release_year = lubridate::year(edited_spotify_clean_dates$AlbumReleaseDate),
Release_month = lubridate::month(edited_spotify_clean_dates$AlbumReleaseDate),
Release_day = lubridate::day(edited_spotify_clean_dates$AlbumReleaseDate))
data2 <- select (data1,-c(AlbumReleaseDate, Release_day))
Season <- data2$Release_month
Season[Season %in% 12] <- "winter"
Season[Season %in% 1] <- "winter"
Season[Season %in% 2] <- "winter"
Season[Season %in% 3] <- "spring"
Season[Season %in% 4] <- "spring"
Season[Season %in% 5] <- "spring"
Season[Season %in% 6] <- "summer"
Season[Season %in% 7] <- "summer"
Season[Season %in% 8] <- "summer"
Season[Season %in% 9] <- "autumn"
Season[Season %in% 10] <- "autumn"
Season[Season %in% 11] <- "autumn"
data2 <- cbind(data2, Season)
data2$Release_month[data2$Release_month %in% 1] <- "January"
data2$Release_month[data2$Release_month %in% 2] <- "February"
data2$Release_month[data2$Release_month %in% 3] <- "March"
data2$Release_month[data2$Release_month %in% 4] <- "April"
data2$Release_month[data2$Release_month %in% 5] <- "May"
data2$Release_month[data2$Release_month %in% 6] <- "June"
data2$Release_month[data2$Release_month %in% 7] <- "July"
data2$Release_month[data2$Release_month %in% 8] <- "August"
data2$Release_month[data2$Release_month %in% 9] <- "September"
data2$Release_month[data2$Release_month %in% 10] <- "October"
data2$Release_month[data2$Release_month %in% 11] <- "November"
data2$Release_month[data2$Release_month %in% 12] <- "December"
setwd("~/GitHub/ST344/EDA")
library(lubridate)
library(dplyr)
edited_spotify_clean_dates$AlbumReleaseDate = parse_date_time(edited_spotify_clean_dates$AlbumReleaseDate,orders=c("y","ym","ymd"))
data1 <- edited_spotify %>% dplyr::mutate(Release_year = lubridate::year(edited_spotify_clean_dates$AlbumReleaseDate),
Release_month = lubridate::month(edited_spotify_clean_dates$AlbumReleaseDate),
Release_day = lubridate::day(edited_spotify_clean_dates$AlbumReleaseDate))
data2 <- select (data1,-c(AlbumReleaseDate, Release_day))
Season <- data2$Release_month
Season[Season %in% 12] <- "winter"
Season[Season %in% 1] <- "winter"
Season[Season %in% 2] <- "winter"
Season[Season %in% 3] <- "spring"
Season[Season %in% 4] <- "spring"
Season[Season %in% 5] <- "spring"
Season[Season %in% 6] <- "summer"
Season[Season %in% 7] <- "summer"
Season[Season %in% 8] <- "summer"
Season[Season %in% 9] <- "autumn"
Season[Season %in% 10] <- "autumn"
Season[Season %in% 11] <- "autumn"
data2 <- cbind(data2, Season)
data2$Release_month[data2$Release_month %in% 1] <- "January"
data2$Release_month[data2$Release_month %in% 2] <- "February"
data2$Release_month[data2$Release_month %in% 3] <- "March"
data2$Release_month[data2$Release_month %in% 4] <- "April"
data2$Release_month[data2$Release_month %in% 5] <- "May"
data2$Release_month[data2$Release_month %in% 6] <- "June"
data2$Release_month[data2$Release_month %in% 7] <- "July"
data2$Release_month[data2$Release_month %in% 8] <- "August"
data2$Release_month[data2$Release_month %in% 9] <- "September"
data2$Release_month[data2$Release_month %in% 10] <- "October"
data2$Release_month[data2$Release_month %in% 11] <- "November"
data2$Release_month[data2$Release_month %in% 12] <- "December"
library(lubridate)
library(dplyr)
library(readxl)
Spotify <- read.xlsx("edited_spotify")
Spotify <- read.xls("edited_spotify")
Spotify <- read.excel("edited_spotify")
Spotify <- read_excel("edited_spotify")
Spotify <- read_excel("edited_spotify.xlsx")
View(myplot1)
rm(list = ls(all.names = TRUE))
library(lubridate)
library(dplyr)
library(readxl)
Spotify <- read_excel("edited_spotify.xlsx")
library(lubridate)
library(dplyr)
library(readxl)
spotify <- read_excel("edited_spotify.xlsx")
spotify$AlbumReleaseDate = parse_date_time(spotify$AlbumReleaseDate,orders=c("y","ym","ymd"))
spotify <- spotify %>% dplyr::mutate(Release_year = lubridate::year(edited_spotify_clean_dates$AlbumReleaseDate),
Release_month = lubridate::month(edited_spotify_clean_dates$AlbumReleaseDate),
Release_day = lubridate::day(edited_spotify_clean_dates$AlbumReleaseDate))
d
spotify <- read_excel("edited_spotify.xlsx")
spotify$AlbumReleaseDate = parse_date_time(spotify$AlbumReleaseDate,orders=c("y","ym","ymd"))
spotify <- spotify %>% dplyr::mutate(Release_year = lubridate::year(spotify$AlbumReleaseDate),
Release_month = lubridate::month(spotify$AlbumReleaseDate),
Release_day = lubridate::day(spotifys$AlbumReleaseDate))
spotify$AlbumReleaseDate = parse_date_time(spotify$AlbumReleaseDate,orders=c("y","ym","ymd"))
spotify <- spotify %>% dplyr::mutate(Release_year = lubridate::year(spotify$AlbumReleaseDate),
Release_month = lubridate::month(spotify$AlbumReleaseDate),
Release_day = lubridate::day(spotify$AlbumReleaseDate))
spotify <- spotify (data1,-c(AlbumReleaseDate, Release_day))
library(timevis)
library(rio)
library(data.table)
library(ggplot2)
library(dplyr)
library(lubridate)
myData <- import("edited_spotify.xlsx", setclass = "tibble")
myData <- mutate(myData, ArtistGenres = strsplit(ArtistGenres, ","))
Genres <- myData$ArtistGenres
Genre <- vector(mode = "list", length = 1)
count = 1
for(each in Genres)
{
for(i in each)
{
Genre[count] = i
count = count + 1
}
}
addCol <- function(myData, name, Genre)
{
isGenre <- as.list(grep('name', Genre, value=TRUE))
isGenre <- unique(isGenre)
numberCol <- ncol(myData) + 1
for(each in 1:length(myData$Artist))
{
myData[each, numberCol] =  length(intersect(as.list(myData[each, 3][[1,1]]), isGenre)) > 0
}
colnames(myData)[numberCol] <- paste ("is", name, sep = "_", collapse = NULL)
return(myData)
}
myData <- addCol(myData, "pop",Genre)
rm(list = ls(all.names = TRUE))
library(timevis)
library(rio)
library(data.table)
library(ggplot2)
library(dplyr)
library(lubridate)
myData <- import("edited_spotify.xlsx", setclass = "tibble")
myData <- mutate(myData, ArtistGenres = strsplit(ArtistGenres, ","))
Genres <- myData$ArtistGenres
Genre <- vector(mode = "list", length = 1)
count = 1
for(each in Genres)
{
for(i in each)
{
Genre[count] = i
count = count + 1
}
}
addCol <- function(myData, name, Genre)
{
isGenre <- as.list(grep('name', Genre, value=TRUE))
isGenre <- unique(isGenre)
numberCol <- ncol(myData) + 1
for(each in 1:length(myData$Artist))
{
myData[each, numberCol] =  length(intersect(as.list(myData[each, 3][[1,1]]), isGenre)) > 0
}
colnames(myData)[numberCol] <- paste ("is", name, sep = "_", collapse = NULL)
return(myData)
}
myData <- addCol(myData, "pop",Genre)
View(myData)
